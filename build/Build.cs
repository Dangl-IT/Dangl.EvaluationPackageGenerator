using Nuke.Common;
using Nuke.Common.Git;
using Nuke.Common.ProjectModel;
using Nuke.Common.Tooling;
using Nuke.Common.Tools.DotNet;
using Nuke.Common.Tools.GitVersion;
using Nuke.Common.Tools.DocFX;
using Nuke.WebDocu;
using System;
using System.IO;
using System.IO.Compression;
using static Nuke.Common.IO.FileSystemTasks;
using static Nuke.Common.IO.PathConstruction;
using static Nuke.Common.IO.TextTasks;
using static Nuke.Common.Tools.DotNet.DotNetTasks;
using static Nuke.Common.Tools.DocFX.DocFXTasks;
using static Nuke.WebDocu.WebDocuTasks;
using Nuke.Common.Tools.AzureKeyVault.Attributes;
using Nuke.Common.Tools.AzureKeyVault;
using Nuke.Common.IO;

class Build : NukeBuild
{
    public static int Main() => Execute<Build>(x => x.Compile);

    [Parameter] readonly string KeyVaultBaseUrl;
    [Parameter] readonly string KeyVaultClientId;
    [Parameter] readonly string KeyVaultClientSecret;
    [KeyVault] readonly KeyVault KeyVault;

    [KeyVaultSettings(
    BaseUrlParameterName = nameof(KeyVaultBaseUrl),
    ClientIdParameterName = nameof(KeyVaultClientId),
    ClientSecretParameterName = nameof(KeyVaultClientSecret))]
    readonly KeyVaultSettings KeyVaultSettings;

    [KeyVaultSecret] readonly string DocuBaseUrl;
    [KeyVaultSecret("DanglEvaluationPackageGenerator-DocuApiKey")] readonly string DocuApiKey;

    [Parameter] readonly string Configuration = IsLocalBuild ? "Debug" : "Release";

    [Solution] readonly Solution Solution;
    [GitRepository] readonly GitRepository GitRepository;
    [GitVersion] readonly GitVersion GitVersion;

    AbsolutePath OutputDirectory => RootDirectory / "output";
    AbsolutePath X64CliZipPath => OutputDirectory / "Dangl.EvaluationPackageGenerator_Win_x64.zip";
    AbsolutePath X86CliZipPath => OutputDirectory / "Dangl.EvaluationPackageGenerator_Win_x86.zip";
    string DocFxFile => RootDirectory / "docfx.json";

    Target Clean => _ => _
        .Executes(() =>
        {
            EnsureCleanDirectory(OutputDirectory);
        });

    Target Restore => _ => _
        .DependsOn(Clean)
        .Executes(() =>
        {
            DotNetRestore(s => s
                .SetProjectFile(Solution));
        });

    Target WriteVersion => _ => _
        .Executes(() =>
        {
            var buildDate = DateTime.UtcNow;
            var filePath = RootDirectory / "Dangl.EvaluationPackageGenerator" / "VersionInfo.cs";

            var currentDateUtc = $"new DateTime({buildDate.Year}, {buildDate.Month}, {buildDate.Day}, {buildDate.Hour}, {buildDate.Minute}, {buildDate.Second}, DateTimeKind.Utc)";

            var content = $@"using System;

namespace Dangl.EvaluationPackageGenerator
{{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    // This file is automatically generated
    [System.CodeDom.Compiler.GeneratedCode(""GitVersionBuild"", """")]
    public static class VersionInfo
    {{
        public static string Version => ""{GitVersion.NuGetVersionV2}"";
        public static string CommitInfo => ""{GitVersion.FullBuildMetaData}"";
        public static string CommitDate => ""{GitVersion.CommitDate}"";
        public static string CommitHash => ""{GitVersion.Sha}"";
        public static string InformationalVersion => ""{GitVersion.InformationalVersion}"";
        public static DateTime BuildDateUtc => {currentDateUtc};
    }}
}}";
            WriteAllText(filePath, content);
        });

    Target Compile => _ => _
        .DependsOn(WriteVersion)
        .DependsOn(Restore)
        .Executes(() =>
        {
            DotNetBuild(s => s
                .SetProjectFile(Solution)
                .SetConfiguration(Configuration)
                .SetAssemblyVersion(GitVersion.AssemblySemVer)
                .SetFileVersion(GitVersion.AssemblySemFileVer)
                .SetInformationalVersion(GitVersion.InformationalVersion)
                .EnableNoRestore());
        });

    Target Publish => _ => _
        .DependsOn(Compile)
        .Requires(() => Configuration == "Release")
        .Executes(() =>
        {
            var publishPath = OutputDirectory / "CLI_Tool";
            DotNetPublish(x => x
                .SetProcessWorkingDirectory(RootDirectory / "Dangl.EvaluationPackageGenerator")
                .SetSelfContained(true)
                .SetConfiguration("Release")
                .SetRuntime("win10-x64")
                .SetOutput(publishPath)
                .SetFileVersion(GitVersion.AssemblySemFileVer)
                .SetAssemblyVersion(GitVersion.AssemblySemVer)
                .SetInformationalVersion(GitVersion.NuGetVersionV2));
            ZipFile.CreateFromDirectory(publishPath, X64CliZipPath);
            DeleteDirectory(publishPath);

            DotNetPublish(x => x
                .SetProcessWorkingDirectory(RootDirectory / "Dangl.EvaluationPackageGenerator")
                .SetSelfContained(true)
                .SetConfiguration("Release")
                .SetRuntime("win10-x86")
                .SetOutput(publishPath)
                .SetFileVersion(GitVersion.AssemblySemFileVer)
                .SetAssemblyVersion(GitVersion.AssemblySemVer)
                .SetInformationalVersion(GitVersion.NuGetVersionV2));
            ZipFile.CreateFromDirectory(publishPath, X86CliZipPath);
            DeleteDirectory(publishPath);
        });

    Target BuildDocumentation => _ => _
        .DependsOn(Publish)
        .Executes(() =>
        {
            // Using README.md as index.md
            if (File.Exists(RootDirectory / "index.md"))
            {
                File.Delete(RootDirectory / "index.md");
            }

            File.Copy(RootDirectory / "README.md", RootDirectory / "index.md");

            DocFXBuild(s => s.SetConfigFile(DocFxFile));

            File.Delete(RootDirectory / "index.md");
        });

    Target UploadDocumentation => _ => _
        .DependsOn(BuildDocumentation)
        .Requires(() => DocuApiKey)
        .Requires(() => DocuBaseUrl)
        .Executes(() =>
        {
            WebDocu(s => s
                .SetDocuBaseUrl(DocuBaseUrl)
                .SetDocuApiKey(DocuApiKey)
                .SetSourceDirectory(OutputDirectory / "docs")
                .SetVersion(GitVersion.NuGetVersion)
                .SetAssetFilePaths(new string[] { X64CliZipPath, X86CliZipPath })
            );
        });
}
